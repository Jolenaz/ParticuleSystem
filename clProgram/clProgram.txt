//typedef struct s_vertex{
//    float4 pos;
//    float4 speed;
//}   vertex;
//
//__kernel void initPoints(__global vertex* buffer, uint caracSize) 
//{
//    vertex ret;
//    uint index = get_global_id(0);
//
//    uint tmp = caracSize * caracSize;
//    ret.pos.s0 = (float)((index % tmp) / caracSize) / caracSize * 10.0f - 5.0f;
//    ret.pos.s1 = (float)((index % tmp) % caracSize) / caracSize * 10.0f - 5.0f;
//    ret.pos.s2 = (float)(index / tmp) / caracSize * 10.0f - 5.0f;
//    ret.pos.s3 = 1.0f;
//    ret.speed = 0.0f;
//    buffer[index] = ret;
//}
//
//
//__kernel void updatePoints(__global vertex* buffer, float delta, float4 centre) 
//{   
//    uint index = get_global_id(0); 
//    vertex new = buffer[index];
//    float4 acc = fast_normalize(centre - buffer[index].pos);
//    acc.s3 = 0.0f;
//    new.pos += new.speed * delta;
//    new.speed += acc * delta;
//    //buffer[index] = new;
//}

typedef struct s_vertex{
    float3 pos;
    float3 speed;
}   vertex;

__kernel void initPoints(__global vertex* buffer, uint caracSize) 
{
    vertex ret;
    uint index = get_global_id(0);

    uint tmp = caracSize * caracSize;
    ret.pos.s0 = (float)((index % tmp) / caracSize) / caracSize * 10.0f - 5.0f;
    ret.pos.s1 = (float)((index % tmp) % caracSize) / caracSize * 10.0f - 5.0f;
    ret.pos.s2 = (float)(index / tmp) / caracSize * 10.0f - 5.0f;
    ret.speed = 0.0f;
    buffer[index] = ret;
}


__kernel void updatePoints(__global vertex* buffer, float delta, float3 centre) 
{   
    uint index = get_global_id(0); 
    vertex new = buffer[index];
    float3 acc = fast_normalize(centre - buffer[index].pos);
    new.pos += new.speed * delta;
    new.speed += acc * delta * 6.0f;
    buffer[index] = new;
}
